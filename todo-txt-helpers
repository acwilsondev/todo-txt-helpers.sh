#!/bin/bash

# todo-txt-helpers: A unified command-line tool for todo.txt management
# Converted from sourced aliases and functions to standalone program

# Default environment variables
export AUTOSORT_TODO="${AUTOSORT_TODO:-true}"
export COLORIZE_TODO="${COLORIZE_TODO:-true}"

# Check for required environment variables
if [ -z "$TODO_FILE" ]; then
    echo "Error: TODO_FILE environment variable is not set" >&2
    exit 1
fi

if [ -z "$TODO_DONE_FILE" ]; then
    echo "Error: TODO_DONE_FILE environment variable is not set" >&2
    exit 1
fi

# Function to highlight priorities with colors
todo_highlight_priorities() {
    local MAGENTA="$(printf '\033[1;35m')"
    local RED="$(printf '\033[1;31m')"          # Bright red
    local ORANGE="$(printf '\033[38;5;208m')"   # ANSI 256-color orange
    local YELLOW="$(printf '\033[1;33m')"       # Bright yellow
    local DIM="$(printf '\033[2m')"
    local RESET="$(printf '\033[0m')"
    local GRAY="$(printf '\033[38;5;239m')"
    local BLUE="$(printf '\033[34m')"

    if [ "$COLORIZE_TODO" = "true" ]; then
        sed -E \
            -e "s/^(\\(\\*\\))/${MAGENTA}\\1${RESET}/" \
            -e "s/^(\\(A\\))/${RED}\\1${RESET}/" \
            -e "s/^(\\(B\\))/${ORANGE}\\1${RESET}/" \
            -e "s/^(\\(C\\))/${YELLOW}\\1${RESET}/" \
            -e "s/^(\\([D-Z]\\) .*)/${DIM}\\1${RESET}/" \
            -e "s/(\\+[a-zA-Z0-9_-]+)/${RESET}${BLUE}\\1${RESET}/" \
            -e "s/(@[a-zA-Z0-9_-]+)/${RESET}${BLUE}\\1${RESET}/" \
            -e "s/^(x .*)/${GRAY}${DIM}\\1${RESET}/"
    else
        cat
    fi
}

# Function to sort todo file
todo_sort() {
    sort -u "$TODO_FILE" -o "$TODO_FILE"
}

# Function to edit todo file
todo_edit() {
    ${EDITOR:-vi} "$TODO_FILE"
}

# Function to show next task
todo_next() {
    head -n 1 "$TODO_FILE" | todo_highlight_priorities | nl
}

# Function to list all tasks
todo_ls() {
    cat "$TODO_FILE" | todo_highlight_priorities | nl
}

# Function to grep through tasks
todo_grep() {
    if [ "$#" -eq 0 ]; then
        echo "Usage: todo-txt-helpers grep PATTERN"
        return 1
    fi
    todo_ls | grep "$@"
}

# Function to show tasks with due dates
todo_due() {
    todo_ls | grep "due:"
}

# Function to count lines in todo file
todo_wc() {
    wc -l "$TODO_FILE"
}

# Function to show inbox tasks
todo_inbox() {
    todo_ls | grep "(\\*)"
}

# Function to show easy tasks
todo_easy() {
    todo_ls | grep -E "effort:(S|XS)"
}

# Function to show first N tasks
todo_head() {
    local n=${1:-5}
    todo_ls | head -n "$n"
}

# Function to edit recurring tasks file
todo_recur() {
    if [ -z "$TODO_RECUR_FILE" ]; then
        echo "Error: TODO_RECUR_FILE environment variable is not set" >&2
        return 1
    fi
    ${EDITOR:-vi} "$TODO_RECUR_FILE"
}

# Function to mark tasks as done
todo_x() {
    if [ "$#" -eq 0 ]; then
        echo "Usage: todo-txt-helpers x LINE [LINE ...]"
        return 1
    fi

    local today
    today=$(date +%Y-%m-%d)

    for n in "$@"; do
        # remove priority marker (if present)
        sed -i "${n}s/^ *(\\([A-Z\\*]\\)) //" "$TODO_FILE"
        # prefix line with completion mark and date
        sed -i "${n}s/^/x $today /" "$TODO_FILE"
    done

    if [ "$AUTOSORT_TODO" = true ]; then
        todo_sort
    fi
}

# Function to add new task
todo_add() {
    if [ "$#" -eq 0 ]; then
        echo "Usage: todo-txt-helpers add TASK_DESCRIPTION"
        return 1
    fi
    
    local today
    today=$(date +%Y-%m-%d)
    echo "(*) $today $*" >> "$TODO_FILE"

    if [ "$AUTOSORT_TODO" = true ]; then
        todo_sort
    fi
}

# Function to show priority counts
todo_priorities() {
    grep -oE "^\\([A-Z]\\)" "$TODO_FILE" | sort | uniq -c
}

# Function to show project counts
todo_projects() {
    grep -oE "\\+[a-zA-Z0-9_\\-]+" "$TODO_FILE" | sort | uniq -c | sort -nr
}

# Function to show context counts
todo_contexts() {
    grep -oE "@[a-zA-Z0-9_\\-]+" "$TODO_FILE" | sort | uniq -c | sort -nr
}

# Function to remove tasks
todo_rm() {
    if [ "$#" -eq 0 ]; then
        echo "Usage: todo-txt-helpers rm LINE [LINE ...]"
        return 1
    fi

    # Build sed delete expression like '5d;10d;12d'
    local sed_expr=""
    for n in "$@"; do
        sed_expr+="${n}d;"
    done

    sed -i "$sed_expr" "$TODO_FILE"
}

# Function to archive done tasks
todo_archive() {
    grep '^x ' "$TODO_FILE" >> "$TODO_DONE_FILE"
    sed -i '/^x /d' "$TODO_FILE"
}

# Function to show help
todo_help() {
    cat <<'EOF'
# todo-txt-helpers: usage info for todo.txt helpers

# Environment variables:
#   TODO_FILE          # path to your todo.txt file (required)
#   TODO_DONE_FILE     # path to your done.txt file (required)
#   TODO_RECUR_FILE    # path to your recurring tasks file (optional)
#   AUTOSORT_TODO=true # automatically sort file after add/remove
#   COLORIZE_TODO=true # colorize output by priority and done state

# View tasks:
todo-txt-helpers ls        # show todo list
todo-txt-helpers next      # show top task (first line)
todo-txt-helpers grep      # grep through tasks with line numbers
todo-txt-helpers due       # list tasks that contain "due:"
todo-txt-helpers inbox     # show inbox tasks (*)
todo-txt-helpers easy      # show easy tasks (effort:S or XS)
todo-txt-helpers head [N]  # print first N tasks with line numbers (default: 5)
todo-txt-helpers wc        # count lines in todo file

# Edit:
todo-txt-helpers edit      # open todo file in your editor
todo-txt-helpers sort      # sort and deduplicate the todo file (per todo.txt spec)
todo-txt-helpers recur     # edit recurring tasks file

# Add / remove / complete tasks:
todo-txt-helpers add "your task"    # append task to file, then autosort if enabled
todo-txt-helpers x N+               # mark tasks N as done (adds date, removes priority)
todo-txt-helpers rm N+              # delete tasks N (by line number)
todo-txt-helpers archive            # move all done tasks (starting with 'x ') to done file

# Reports:
todo-txt-helpers priorities  # count of tasks by priority (A, B, C, etc.)
todo-txt-helpers projects    # count of +projects
todo-txt-helpers contexts    # count of @contexts

# Call `todo-txt-helpers help` to print this info
EOF
}

# Main command dispatcher
main() {
    if [ "$#" -eq 0 ]; then
        echo "Usage: todo-txt-helpers COMMAND [ARGS...]"
        echo "Run 'todo-txt-helpers help' for available commands"
        exit 1
    fi

    local command="$1"
    shift

    case "$command" in
        "sort")
            todo_sort
            ;;
        "edit")
            todo_edit
            ;;
        "next")
            todo_next
            ;;
        "ls")
            todo_ls
            ;;
        "grep")
            todo_grep "$@"
            ;;
        "due")
            todo_due
            ;;
        "wc")
            todo_wc
            ;;
        "inbox")
            todo_inbox
            ;;
        "easy")
            todo_easy
            ;;
        "head")
            todo_head "$@"
            ;;
        "recur")
            todo_recur
            ;;
        "x")
            todo_x "$@"
            ;;
        "add")
            todo_add "$@"
            ;;
        "priorities")
            todo_priorities
            ;;
        "projects")
            todo_projects
            ;;
        "contexts")
            todo_contexts
            ;;
        "rm")
            todo_rm "$@"
            ;;
        "archive")
            todo_archive
            ;;
        "help")
            todo_help
            ;;
        *)
            echo "Unknown command: $command"
            echo "Run 'todo-txt-helpers help' for available commands"
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"
